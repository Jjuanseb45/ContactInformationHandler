// <auto-generated />
using System;
using ContactInfoHandler.Infrastructure.Data.Persistence.Core.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactInfoHandler.Infrastructure.Data.Persistence.Core.Migrations
{
    [DbContext(typeof(ContextDb))]
    [Migration("20210331141033_Onceava migracion")]
    partial class Onceavamigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Areas.AreaOfWorkEntity", b =>
                {
                    b.Property<Guid>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ResponsableEmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Identifications.KindOfIdentificationEntity", b =>
                {
                    b.Property<Guid>("KindOfIdentificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentificationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KindOfIdentificationId");

                    b.ToTable("KindsOfId");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Customers.CustomerEntity", b =>
                {
                    b.Property<Guid>("IdCustmer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FavoriteBrand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("KindOfIdentificationEntityKindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KindOfPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SignUpDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IdCustmer");

                    b.HasIndex("KindOfIdentificationEntityKindOfIdentificationId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Employees.EmployeeEntity", b =>
                {
                    b.Property<Guid>("IdEmployee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AreaOfWorkEntityAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EmployeeCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("KindOfIdentificationEntityKindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KindOfPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SignUpDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IdEmployee");

                    b.HasIndex("AreaOfWorkEntityAreaId");

                    b.HasIndex("KindOfIdentificationEntityKindOfIdentificationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Providers.ProviderEntity", b =>
                {
                    b.Property<Guid>("IdProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("DateOfBirth")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("IdNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("KindOfIdentificationEntityKindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KindOfIdentificationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KindOfPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("SignUpDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("IdProvider");

                    b.HasIndex("KindOfIdentificationEntityKindOfIdentificationId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Customers.CustomerEntity", b =>
                {
                    b.HasOne("ContactInfoHandler.Dominio.Core.Identifications.KindOfIdentificationEntity", null)
                        .WithMany("CustomersList")
                        .HasForeignKey("KindOfIdentificationEntityKindOfIdentificationId");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Employees.EmployeeEntity", b =>
                {
                    b.HasOne("ContactInfoHandler.Dominio.Core.Areas.AreaOfWorkEntity", null)
                        .WithMany("EmployeeLists")
                        .HasForeignKey("AreaOfWorkEntityAreaId");

                    b.HasOne("ContactInfoHandler.Dominio.Core.Identifications.KindOfIdentificationEntity", null)
                        .WithMany("EmployeeEntities")
                        .HasForeignKey("KindOfIdentificationEntityKindOfIdentificationId");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Persons.Providers.ProviderEntity", b =>
                {
                    b.HasOne("ContactInfoHandler.Dominio.Core.Identifications.KindOfIdentificationEntity", null)
                        .WithMany("ProvidersList")
                        .HasForeignKey("KindOfIdentificationEntityKindOfIdentificationId");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Areas.AreaOfWorkEntity", b =>
                {
                    b.Navigation("EmployeeLists");
                });

            modelBuilder.Entity("ContactInfoHandler.Dominio.Core.Identifications.KindOfIdentificationEntity", b =>
                {
                    b.Navigation("CustomersList");

                    b.Navigation("EmployeeEntities");

                    b.Navigation("ProvidersList");
                });
#pragma warning restore 612, 618
        }
    }
}
